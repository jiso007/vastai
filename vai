#!/bin/bash
# VAI - Vast.ai Command Line Interface
# Quick access to all Vast.ai automation scripts

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PYTHON_SCRIPTS_DIR="$SCRIPT_DIR/SCRIPTS/python_scripts"

# Function to show help
show_help() {
    echo "🚀 VAI - Vast.ai Workflow Command Interface"
    echo "============================================="
    echo ""
    echo "PRIMARY WORKFLOWS:"
    echo "  vai create [index] [gpu] [provision_script] [disk_size]  - Create and Monitor instance"
    echo "  vai exec <instance> <config_file>               - Execute workflow from config"
    echo ""
    echo "WORKFLOW MANAGEMENT:"
    echo "  vai workflow analyze <workflow_file>         - Analyze workflow and create config template"
    echo "  vai workflow list                            - List available workflow templates"
    echo ""
    echo "JOB MANAGEMENT:"
    echo "  vai cancel <instance> <job_id>           - Cancel specific job"
    echo "  vai cancel <instance> --list             - List all active jobs for instance"
    echo "  vai cancel <instance> --all              - Cancel ALL jobs for instance"
    echo "  vai cancel --all                         - Cancel ALL jobs across ALL instances"
    echo ""
    echo "INSTANCE MANAGEMENT:"
    echo "  vai destroy <instance>                   - Destroy specific instance"
    echo "  vai destroy --all                        - Destroy ALL instances"
    echo "  vai stop <instance>                      - Stop specific instance"
    echo "  vai stop --all                           - Stop ALL running instances"
    echo "  vai start <instance>                     - Start specific instance"
    echo "  vai start --all                          - Start ALL stopped instances"
    echo "  vai list                                 - List all instances with status"
    echo "  vai search [index] [gpu]                 - Search for GPU offers"
    echo ""
    echo "EXAMPLES:"
    echo "  vai create                                # Use defaults (index=0, RTX 3060, provision_test_3.sh)"
    echo "  vai create 1 \"RTX 4090\" provision_test_1.sh 200   # Custom settings with 200GB disk"
    echo "  vai exec 26003629 wan2-2-I2V-FP8-Lightning-user_friendly.json"
    echo "  vai workflow analyze TEMPLATES/workflows/new-workflow.json  # Create config template"
    echo "  vai workflow list                         # List available templates"
    echo "  vai cancel 26003629 --list               # List all active jobs for instance"
    echo "  vai cancel 26003629 abc123def456         # Cancel specific job"
    echo "  vai cancel 26003629 --all                # Cancel ALL jobs for instance"
    echo "  vai cancel --all                         # Cancel ALL jobs across ALL instances"
    echo "  vai destroy 26003629                     # Destroy specific instance"
    echo "  vai stop --all                           # Stop all running instances"
    echo "  vai list                                 # List all instances"
    echo "  vai search                               # Search for RTX 3060 offers (default)"
    echo "  vai search 2 \"RTX 4090\"                 # Search for RTX 4090, select index 2"
    echo ""
    echo "HELP:"
    echo "  vai create --help                        # Show create_and_monitor.py help"
    echo "  vai exec --help                          # Show execute_workflow.py help"
    echo "  vai workflow --help                      # Show workflow management help"
    echo "  vai cancel --help                        # Show cancel_job.py help"
    echo "  vai destroy --help                       # Show destroy_instance.py help"
    echo "  vai stop --help                          # Show stop/start help"
    echo "  vai search --help                        # Show search help"
    echo "  vai help                                 # Show this help"
    echo ""
    echo "WORKFLOW FILES:"
    echo "  Available in: /workspace/ComfyUI/user/default/workflows/"
    echo "  - wan2-2-I2V-FP8-Lightning.json"
    echo ""
    echo "PROVISIONING SCRIPTS:"
    echo "  Available options: provision_test_1.sh, provision_test_2.sh, provision_test_3.sh (default)"
}

# Check if no arguments provided
if [ $# -eq 0 ]; then
    show_help
    exit 0
fi

# Get the command
COMMAND="$1"
shift  # Remove first argument, so $@ now contains the rest

case "$COMMAND" in
    "create"|"cm")
        # Check if --help is requested
        if [[ "$1" == "--help" || "$1" == "-h" ]]; then
            echo "🎯 Create and Monitor Workflow Help"
            echo "===================================="
            echo "Usage: vai create [INDEX] [GPU_NAME] [PROVISIONING_SCRIPT] [DISK_SIZE]"
            echo ""
            echo "Arguments:"
            echo "  INDEX               Offer index to select (default: 0)"
            echo "  GPU_NAME            GPU to search for (default: 'RTX 3060')"
            echo "  PROVISIONING_SCRIPT Provisioning script to use (default: 'provision_test_3.sh')"
            echo "  DISK_SIZE           Disk size in GB (default: 100)"
            echo ""
            echo "Examples:"
            echo "  vai create                            # Use all defaults"
            echo "  vai create 1                          # Use offer index 1"
            echo "  vai create 1 \"RTX 4090\"              # Custom GPU"
            echo "  vai create 1 \"RTX 4090\" provision_test_1.sh # Custom script"
            echo "  vai create 1 \"RTX 4090\" provision_test_1.sh 200 # Custom disk size"
            echo ""
            echo "This command will:"
            echo "  1. Search for GPU offers"
            echo "  2. Create instance with selected provisioning script"
            echo "  3. Monitor until instance is ready"
            echo "  4. Display instance ID when complete"
        else
            echo "🎯 Running Create and Monitor workflow..."
            cd "$SCRIPT_DIR" && poetry run python "$PYTHON_SCRIPTS_DIR/workflows/create_and_monitor.py" "$@"
        fi
        ;;
    
    "exec"|"execute")
        # Check if --help is requested
        if [[ "$1" == "--help" || "$1" == "-h" ]]; then
            echo "⚡ Execute Workflow Help"
            echo "========================"
            echo "Usage: vai exec <INSTANCE_ID> <CONFIG_FILENAME>"
            echo ""
            echo "Arguments:"
            echo "  INSTANCE_ID        Vast.ai instance ID"
            echo "  CONFIG_FILENAME    Configuration file from TEMPLATES/configs/"
            echo ""
            echo "Examples:"
            echo "  vai exec 26003629 wan2-2-I2V-FP8-Lightning-user_friendly.json"
            echo "  vai exec 26003629 my-custom-workflow-detailed.json"
            echo ""
            echo "This command will:"
            echo "  1. Load configuration from TEMPLATES/configs/"
            echo "  2. Auto-detect and upload required images from TEMPLATES/images/"
            echo "  3. Load text prompts from TEMPLATES/prompts/ (for .txt references)"
            echo "  4. Apply all configuration changes to the workflow"
            echo "  5. Execute the modified workflow on the instance"
            echo "  6. Display job ID for tracking progress"
            echo ""
            echo "Configuration files:"
            echo "  Generated by: vai workflow analyze <workflow.json>"
            echo "  Location: TEMPLATES/configs/"
            echo "  Contains: Instance settings, workflow parameters, file references"
            echo ""
            echo "File handling:"
            echo "  - .png/.jpg files → Auto-upload from TEMPLATES/images/"
            echo "  - .txt files → Load content from TEMPLATES/prompts/"
            echo "  - All changes applied automatically based on config"
        else
            echo "⚡ Running Execute Workflow (Config-based)..."
            cd "$SCRIPT_DIR" && poetry run python "$PYTHON_SCRIPTS_DIR/workflows/execute_workflow_config.py" "$@"
        fi
        ;;
    
    "cancel")
        # Check if --help is requested
        if [[ "$1" == "--help" || "$1" == "-h" ]]; then
            echo "🛑 Cancel Job Help"
            echo "=================="
            echo "Usage: vai cancel <INSTANCE_ID> <JOB_ID>"
            echo "       vai cancel <INSTANCE_ID> --list"
            echo "       vai cancel <INSTANCE_ID> --all"
            echo "       vai cancel --all"
            echo ""
            echo "Arguments:"
            echo "  INSTANCE_ID        Vast.ai instance ID (optional when using --all globally)"
            echo "  JOB_ID             ComfyUI job ID to cancel"
            echo ""
            echo "Options:"
            echo "  --list, -l         List all active jobs for the instance"
            echo "  --all, -a          Cancel ALL jobs (for instance or globally)"
            echo "  --force, -f        Skip confirmation prompt"
            echo ""
            echo "Examples:"
            echo "  vai cancel 26003629 --list               # List jobs for instance"
            echo "  vai cancel 26003629 abc123def456         # Cancel specific job"
            echo "  vai cancel 26003629 --all                # Cancel ALL jobs for instance"
            echo "  vai cancel --all                         # Cancel ALL jobs across ALL instances"
            echo "  vai cancel 26003629 --all --force        # Cancel all for instance without confirmation"
            echo ""
            echo "This command will:"
            echo "  1. Auto-fetch SSH connection details from Vast.ai API"
            echo "  2. Find jobs in running or pending queue"
            echo "  3. Cancel using appropriate method (interrupt/queue removal)"
            echo "  4. Verify cancellation completed successfully"
            echo "  5. When using --all globally, process all running instances"
        else
            echo "🛑 Managing ComfyUI jobs..."
            cd "$SCRIPT_DIR" && poetry run python "$PYTHON_SCRIPTS_DIR/components/cancel_job.py" "$@"
        fi
        ;;
    
    "destroy")
        # Check if --help is requested
        if [[ "$1" == "--help" || "$1" == "-h" ]]; then
            echo "🔥 Destroy Instance Help"
            echo "========================"
            echo "Usage: vai destroy <INSTANCE_ID>"
            echo "       vai destroy --all"
            echo ""
            echo "Arguments:"
            echo "  INSTANCE_ID        Vast.ai instance ID to destroy"
            echo ""
            echo "Options:"
            echo "  --all, -a          Destroy ALL instances"
            echo "  --list, -l         List all instances"
            echo "  --force, -f        Skip confirmation prompt"
            echo ""
            echo "Examples:"
            echo "  vai destroy 26003629                     # Destroy specific instance"
            echo "  vai destroy --all                        # Destroy ALL instances"
            echo "  vai destroy --all --force                # Destroy all without confirmation"
            echo "  vai destroy --list                       # List all instances"
            echo ""
            echo "⚠️  WARNING: Destroying instances is IRREVERSIBLE!"
        else
            echo "🔥 Managing instance destruction..."
            cd "$SCRIPT_DIR" && poetry run python "$PYTHON_SCRIPTS_DIR/components/destroy_instance.py" "$@"
        fi
        ;;
    
    "pause"|"stop")
        # Check if --help is requested
        if [[ "$1" == "--help" || "$1" == "-h" ]]; then
            echo "⏸️ Stop Instance Help"
            echo "====================="
            echo "Usage: vai stop <INSTANCE_ID>"
            echo "       vai stop --all"
            echo ""
            echo "Arguments:"
            echo "  INSTANCE_ID        Vast.ai instance ID to stop"
            echo ""
            echo "Options:"
            echo "  --all, -a          Stop ALL running instances"
            echo "  --force, -f        Skip confirmation prompt"
            echo ""
            echo "Examples:"
            echo "  vai stop 26003629                        # Stop specific instance"
            echo "  vai stop --all                           # Stop ALL running instances"
            echo "  vai stop --all --force                   # Stop all without confirmation"
            echo ""
            echo "This command will stop instances to save costs while preserving data."
        else
            echo "⏸️ Managing instance stop..."
            cd "$SCRIPT_DIR" && poetry run python "$PYTHON_SCRIPTS_DIR/components/pause_instance.py" stop "$@"
        fi
        ;;
    
    "unpause"|"start")
        # Check if --help is requested
        if [[ "$1" == "--help" || "$1" == "-h" ]]; then
            echo "▶️ Start Instance Help"
            echo "======================="
            echo "Usage: vai start <INSTANCE_ID>"
            echo "       vai start --all"
            echo ""
            echo "Arguments:"
            echo "  INSTANCE_ID        Vast.ai instance ID to start"
            echo ""
            echo "Options:"
            echo "  --all, -a          Start ALL stopped instances"
            echo "  --force, -f        Skip confirmation prompt"
            echo "  --no-monitor       Skip detailed startup monitoring"
            echo ""
            echo "Examples:"
            echo "  vai start 26003629                       # Start specific instance with monitoring"
            echo "  vai start 26003629 --no-monitor          # Start without detailed monitoring"
            echo "  vai start --all                          # Start ALL stopped instances"
            echo "  vai start --all --force                  # Start all without confirmation"
            echo ""
            echo "This command will resume stopped instances and monitor startup progress by default."
        else
            echo "▶️ Managing instance start..."
            cd "$SCRIPT_DIR" && poetry run python "$PYTHON_SCRIPTS_DIR/components/pause_instance.py" start "$@"
        fi
        ;;
    
    "list")
        echo "📋 Listing all instances..."
        cd "$SCRIPT_DIR" && poetry run python "$PYTHON_SCRIPTS_DIR/components/pause_instance.py" --list
        ;;
    
    "search")
        # Check if --help is requested
        if [[ "$1" == "--help" || "$1" == "-h" ]]; then
            echo "🔍 Search GPU Offers Help"
            echo "========================="
            echo "Usage: vai search [INDEX] [GPU_NAME]"
            echo ""
            echo "Arguments:"
            echo "  INDEX               Offer index to select (default: 0)"
            echo "  GPU_NAME            GPU to search for (default: 'RTX 3060')"
            echo ""
            echo "Examples:"
            echo "  vai search                                # Use defaults (index=0, RTX 3060)"
            echo "  vai search 2                              # Select index 2, RTX 3060"
            echo "  vai search 0 \"RTX 4090\"                  # Search RTX 4090, index 0"
            echo "  vai search 3 \"RTX A6000\"                 # Search RTX A6000, index 3"
            echo ""
            echo "This command will:"
            echo "  1. Search for available GPU offers on Vast.ai"
            echo "  2. Filter by price, bandwidth, and reliability"
            echo "  3. Sort by lowest 10-minute total cost"
            echo "  4. Display top 10 offers with details"
            echo "  5. Return the selected offer ID"
        else
            echo "🔍 Searching for GPU offers..."
            cd "$SCRIPT_DIR" && poetry run python "$PYTHON_SCRIPTS_DIR/components/search_offers.py" "$@"
        fi
        ;;
    
    "workflow"|"wf")
        # Check if --help is requested or no subcommand
        if [[ "$1" == "--help" || "$1" == "-h" || $# -eq 0 ]]; then
            echo "🎯 Workflow Management Help"
            echo "==========================="
            echo "Usage: vai workflow <subcommand> [options]"
            echo ""
            echo "SUBCOMMANDS:"
            echo "  analyze <workflow_file>     - Analyze workflow and create editable config"
            echo "  list                        - List available workflow templates"
            echo ""
            echo "ANALYZE OPTIONS:"
            echo "  --format, -f <format>       - Output format: user_friendly (default), detailed, minimal"
            echo "  --output, -o <path>         - Custom output path (auto-generated if not specified)"
            echo "  --pretty, -p                - Pretty print the configuration to console"
            echo ""
            echo "EXAMPLES:"
            echo "  vai workflow analyze my-workflow.json"
            echo "  vai workflow analyze my-workflow.json --format minimal"
            echo "  vai workflow analyze my-workflow.json --pretty"
            echo "  vai workflow list"
            echo ""
            echo "This will:"
            echo "  1. Extract all configurable parameters from any ComfyUI workflow"
            echo "  2. Remove UI clutter (positioning, colors, etc.)"
            echo "  3. Create clean, editable configuration files"
            echo "  4. Save to TEMPLATES/configs/ for easy editing"
            echo ""
            echo "Output formats:"
            echo "  user_friendly: Simple, easy-to-edit format for end users"
            echo "  detailed:      More structured but comprehensive format"
            echo "  minimal:       Just the essential configurable parts"
        else
            SUBCOMMAND="$1"
            shift
            
            case "$SUBCOMMAND" in
                "analyze"|"a")
                    if [ $# -eq 0 ]; then
                        echo "❌ Please provide a workflow filename"
                        echo "Example: vai workflow analyze my-workflow.json"
                        echo "Available files:"
                        if [ -d "$SCRIPT_DIR/TEMPLATES/workflows" ]; then
                            for file in "$SCRIPT_DIR/TEMPLATES/workflows"/*.json; do
                                if [ -f "$file" ]; then
                                    echo "  - $(basename "$file")"
                                fi
                            done
                        fi
                        exit 1
                    fi
                    
                    # Get the filename (first argument)
                    WORKFLOW_FILE="$1"
                    shift  # Remove filename from arguments
                    
                    # Check if it's already a full path or just a filename
                    if [[ "$WORKFLOW_FILE" == *"/"* ]]; then
                        # It's a full path, use as-is
                        FULL_PATH="$WORKFLOW_FILE"
                    else
                        # It's just a filename, prepend the templates path
                        FULL_PATH="$SCRIPT_DIR/TEMPLATES/workflows/$WORKFLOW_FILE"
                    fi
                    
                    # Check if file exists
                    if [ ! -f "$FULL_PATH" ]; then
                        echo "❌ Workflow file not found: $FULL_PATH"
                        echo "Available files in TEMPLATES/workflows/:"
                        if [ -d "$SCRIPT_DIR/TEMPLATES/workflows" ]; then
                            for file in "$SCRIPT_DIR/TEMPLATES/workflows"/*.json; do
                                if [ -f "$file" ]; then
                                    echo "  - $(basename "$file")"
                                fi
                            done
                        fi
                        exit 1
                    fi
                    
                    echo "🔍 Analyzing workflow template: $(basename "$FULL_PATH")"
                    cd "$SCRIPT_DIR" && poetry run python "$PYTHON_SCRIPTS_DIR/workflows/analyze_workflow_generic.py" "$FULL_PATH" "$@"
                    ;;
                "list"|"ls")
                    echo "📋 Available workflow templates:"
                    echo "================================"
                    if [ -d "$SCRIPT_DIR/TEMPLATES/workflows" ]; then
                        for file in "$SCRIPT_DIR/TEMPLATES/workflows"/*.json; do
                            if [ -f "$file" ]; then
                                basename "$file"
                            fi
                        done
                    else
                        echo "No workflow templates found in TEMPLATES/workflows/"
                    fi
                    echo ""
                    echo "📋 Available config templates:"
                    echo "============================="
                    if [ -d "$SCRIPT_DIR/TEMPLATES/configs" ]; then
                        for file in "$SCRIPT_DIR/TEMPLATES/configs"/*.json; do
                            if [ -f "$file" ]; then
                                basename "$file"
                            fi
                        done
                    else
                        echo "No config templates found in TEMPLATES/configs/"
                        echo "Use 'vai workflow analyze' to create some!"
                    fi
                    ;;
                *)
                    echo "❌ Unknown workflow subcommand: $SUBCOMMAND"
                    echo "Use 'vai workflow --help' for available options"
                    exit 1
                    ;;
            esac
        fi
        ;;
    
    "help"|"--help"|"-h")
        show_help
        ;;
    
    *)
        echo "❌ Unknown command: $COMMAND"
        echo ""
        show_help
        exit 1
        ;;
esac